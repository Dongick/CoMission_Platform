name: Java CI && CD with Gradle

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-22.04
    permissions:
      contents: read
    env:
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      MONGODB_HOST: ${{secrets.MONGODB_HOST}}
      MONGODB_DATABASE: ${{secrets.MONGODB_DATABASE}}
      MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_HOST: ${{secrets.MYSQL_HOST}}
      MYSQL_DATABASE: ${{secrets.MYSQL_DATABASE}}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      OAUTH2_NAVER_CLIENT_ID: ${{ secrets.OAUTH2_NAVER_CLIENT_ID }}
      OAUTH2_NAVER_CLIENT_SECRET: ${{ secrets.OAUTH2_NAVER_CLIENT_SECRET }}
      OAUTH2_NAVER_REDIRECT_URI: ${{secrets.OAUTH2_NAVER_REDIRECT_URI}}
      OAUTH2_GOOGLE_CLIENT_ID: ${{ secrets.OAUTH2_GOOGLE_CLIENT_ID }}
      OAUTH2_GOOGLE_CLIENT_SECRET: ${{ secrets.OAUTH2_GOOGLE_CLIENT_SECRET }}
      OAUTH2_GOOGLE_REDIRECT_URI: ${{secrets.OAUTH2_GOOGLE_REDIRECT_URI}}
      APP_CORS_ALLOWED_ORIGINS: ${{secrets.APP_CORS_ALLOWED_ORIGINS}}
      S3_BUCKET: ${{secrets.S3_BUCKET}}
      SPRING_PROFILES_ACTIVE: ${{secrets.SPRING_PROFILES_ACTIVE}}

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradle && Build with Gradle without Test
      run: |
        cd ./backend
        chmod +x gradlew
        ./gradlew clean build -x test --stacktrace
      
    ####### CD ##############
    ## docker hub 로그인 && image build && push
    - name: Docker hub login
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Docker image build
      run: |
        cd ./backend
        docker build -t ${{secrets.DOCKERHUB_USERNAME}}/comission-platform .

    - name: Docker Hub push
      run: docker push ${{secrets.DOCKERHUB_USERNAME}}/comission-platform

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{secrets.EC2_HOST}}
        username: ubuntu
        key: ${{secrets.EC2_KEY}}
        script: |
          sudo docker login -u ${{secrets.DOCKERHUB_USERNAME}} -p ${{secrets.DOCKERHUB_PASSWORD}}
          sudo docker rm -f $(sudo docker ps -qa) 2>/dev/null || true
          sudo docker pull ${{secrets.DOCKERHUB_USERNAME}}/comission-platform
          sudo docker run --name comission-platform --rm -dit -p 8080:8080 \
            -e AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}" \
            -e AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}" \
            -e MONGODB_USERNAME="${{ secrets.MONGODB_USERNAME }}" \
            -e MONGODB_PASSWORD="${{ secrets.MONGODB_PASSWORD }}" \
            -e MONGODB_HOST="${{ secrets.MONGODB_HOST }}" \
            -e MONGODB_DATABASE="${{ secrets.MONGODB_DATABASE }}" \
            -e MYSQL_USERNAME="${{ secrets.MYSQL_USERNAME }}" \
            -e MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
            -e MYSQL_HOST="${{ secrets.MYSQL_HOST }}" \
            -e MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e OAUTH2_NAVER_CLIENT_ID="${{ secrets.OAUTH2_NAVER_CLIENT_ID }}" \
            -e OAUTH2_NAVER_CLIENT_SECRET="${{ secrets.OAUTH2_NAVER_CLIENT_SECRET }}" \
            -e OAUTH2_NAVER_REDIRECT_URI="${{ secrets.OAUTH2_NAVER_REDIRECT_URI }}" \
            -e OAUTH2_GOOGLE_CLIENT_ID="${{ secrets.OAUTH2_GOOGLE_CLIENT_ID }}" \
            -e OAUTH2_GOOGLE_CLIENT_SECRET="${{ secrets.OAUTH2_GOOGLE_CLIENT_SECRET }}" \
            -e OAUTH2_GOOGLE_REDIRECT_URI="${{ secrets.OAUTH2_GOOGLE_REDIRECT_URI }}" \
            -e APP_CORS_ALLOWED_ORIGINS="${{ secrets.APP_CORS_ALLOWED_ORIGINS }}" \
            -e S3_BUCKET="${{ secrets.S3_BUCKET }}" \
            -e SPRING_PROFILES_ACTIVE="${{ secrets.SPRING_PROFILES_ACTIVE }}" \
            ${{secrets.DOCKERHUB_USERNAME}}/comission-platform &
          sudo docker image prune -f
